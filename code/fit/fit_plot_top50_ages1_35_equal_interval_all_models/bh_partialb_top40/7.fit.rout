
R version 4.2.2 (2022-10-31) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> 
> # set up R environment
> library(cmdstanr)
This is cmdstanr version 0.6.1
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /data/home/shpli3/.cmdstan/cmdstan-2.32.0
- CmdStan version: 2.32.0
> options(mc.cores = parallel::detectCores(logical = F)) 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(parallel)
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
> setwd("/data/home/shpli3/R_projects/BSS_exclude_tree_raw")
> 
> # Load data
> load("/data/home/shpli3/my_pc/BSS/code/data preparation/transformed data/fit_fp_top40_ages1_35_equal_interval.RData")
> 
> # run model chains separately then combine then to avoid memory issues
> stan.seed = 52
> file = file.path('/data/home/shpli3/my_pc/BSS/code/fit/stancode/model_comprison/constrained_competition_equal_interval/BH_partialb_allposi.stan')
> mod = cmdstan_model(file
+ #, stanc_options = list("allow-undefined")
+ )
> numer_cores = parallel::detectCores(logical = F)
> chains = 4 # 4 chains in parallel
> sampling = 2500
> warmup = 1000
> thin = 10
> 
> 
> fit_save = function(x) {
+   #x = 2
+   species = sp[x]
+   fit = mod$sample(data = datalist[[x]],
+                    seed = stan.seed, 
+                    chains = chains, 
+                    parallel_chains = chains,
+                    iter_warmup = warmup,
+                    iter_sampling = sampling,
+                    refresh = 100, # print update every 100 iters
+                    thin = thin,
+                    max_treedepth = 20,
+                    adapt_delta = 0.99)
+   
+   # Raw output
+   #------------ 
+   fit$save_object(file = paste0('fit_results/plot_ages1_35_top50_equal_interval_model_comparison/bh_partialb_top40', '/posterior/',
+                                 unique(growD$f_p),'_', species, '.RDS'))
+ }
> 
> #--------------------------------------------------
> # Estimate interactions with a joint NDD*RI model for t1
> #--------------------------------------------------
> data_t = fit_fp_top40_ages1_35_equal_interval
> plot_list = sapply(seq(1, 480, 48), function(x){y = c(x:(x+47))})
> names(fit_fp_top40_ages1_35_equal_interval)[plot_list]
  [1] "1_1"   "1_10"  "1_11"  "1_12"  "1_13"  "1_14"  "1_15"  "1_16"  "1_17" 
 [10] "1_18"  "1_19"  "1_2"   "1_20"  "1_21"  "1_22"  "1_23"  "1_24"  "1_25" 
 [19] "1_26"  "1_27"  "1_28"  "1_29"  "1_3"   "1_30"  "1_31"  "1_32"  "1_33" 
 [28] "1_34"  "1_35"  "1_36"  "1_37"  "1_38"  "1_39"  "1_4"   "1_40"  "1_41" 
 [37] "1_42"  "1_43"  "1_44"  "1_45"  "1_46"  "1_47"  "1_48"  "1_5"   "1_6"  
 [46] "1_7"   "1_8"   "1_9"   "10_1"  "10_10" "10_11" "10_12" "10_13" "10_14"
 [55] "10_15" "10_16" "10_17" "10_18" "10_19" "10_2"  "10_20" "10_21" "10_22"
 [64] "10_23" "10_24" "10_25" "10_26" "10_27" "10_28" "10_29" "10_3"  "10_30"
 [73] "10_31" "10_32" "10_33" "10_34" "10_35" "10_36" "10_37" "10_38" "10_39"
 [82] "10_4"  "10_40" "10_41" "10_42" "10_43" "10_44" "10_45" "10_46" "10_47"
 [91] "10_48" "10_5"  "10_6"  "10_7"  "10_8"  "10_9"  "2_1"   "2_10"  "2_11" 
[100] "2_12"  "2_13"  "2_14"  "2_15"  "2_16"  "2_17"  "2_18"  "2_19"  "2_2"  
[109] "2_20"  "2_21"  "2_22"  "2_23"  "2_24"  "2_25"  "2_26"  "2_27"  "2_28" 
[118] "2_29"  "2_3"   "2_30"  "2_31"  "2_32"  "2_33"  "2_34"  "2_35"  "2_36" 
[127] "2_37"  "2_38"  "2_39"  "2_4"   "2_40"  "2_41"  "2_42"  "2_43"  "2_44" 
[136] "2_45"  "2_46"  "2_47"  "2_48"  "2_5"   "2_6"   "2_7"   "2_8"   "2_9"  
[145] "3_1"   "3_10"  "3_11"  "3_12"  "3_13"  "3_14"  "3_15"  "3_16"  "3_17" 
[154] "3_18"  "3_19"  "3_2"   "3_20"  "3_21"  "3_22"  "3_23"  "3_24"  "3_25" 
[163] "3_26"  "3_27"  "3_28"  "3_29"  "3_3"   "3_30"  "3_31"  "3_32"  "3_33" 
[172] "3_34"  "3_35"  "3_36"  "3_37"  "3_38"  "3_39"  "3_4"   "3_40"  "3_41" 
[181] "3_42"  "3_43"  "3_44"  "3_45"  "3_46"  "3_47"  "3_48"  "3_5"   "3_6"  
[190] "3_7"   "3_8"   "3_9"   "4_1"   "4_10"  "4_11"  "4_12"  "4_13"  "4_14" 
[199] "4_15"  "4_16"  "4_17"  "4_18"  "4_19"  "4_2"   "4_20"  "4_21"  "4_22" 
[208] "4_23"  "4_24"  "4_25"  "4_26"  "4_27"  "4_28"  "4_29"  "4_3"   "4_30" 
[217] "4_31"  "4_32"  "4_33"  "4_34"  "4_35"  "4_36"  "4_37"  "4_38"  "4_39" 
[226] "4_4"   "4_40"  "4_41"  "4_42"  "4_43"  "4_44"  "4_45"  "4_46"  "4_47" 
[235] "4_48"  "4_5"   "4_6"   "4_7"   "4_8"   "4_9"   "5_1"   "5_10"  "5_11" 
[244] "5_12"  "5_13"  "5_14"  "5_15"  "5_16"  "5_17"  "5_18"  "5_19"  "5_2"  
[253] "5_20"  "5_21"  "5_22"  "5_23"  "5_24"  "5_25"  "5_26"  "5_27"  "5_28" 
[262] "5_29"  "5_3"   "5_30"  "5_31"  "5_32"  "5_33"  "5_34"  "5_35"  "5_36" 
[271] "5_37"  "5_38"  "5_39"  "5_4"   "5_40"  "5_41"  "5_42"  "5_43"  "5_44" 
[280] "5_45"  "5_46"  "5_47"  "5_48"  "5_5"   "5_6"   "5_7"   "5_8"   "5_9"  
[289] "6_1"   "6_10"  "6_11"  "6_12"  "6_13"  "6_14"  "6_15"  "6_16"  "6_17" 
[298] "6_18"  "6_19"  "6_2"   "6_20"  "6_21"  "6_22"  "6_23"  "6_24"  "6_25" 
[307] "6_26"  "6_27"  "6_28"  "6_29"  "6_3"   "6_30"  "6_31"  "6_32"  "6_33" 
[316] "6_34"  "6_35"  "6_36"  "6_37"  "6_38"  "6_39"  "6_4"   "6_40"  "6_41" 
[325] "6_42"  "6_43"  "6_44"  "6_45"  "6_46"  "6_47"  "6_48"  "6_5"   "6_6"  
[334] "6_7"   "6_8"   "6_9"   "7_1"   "7_10"  "7_11"  "7_12"  "7_13"  "7_14" 
[343] "7_15"  "7_16"  "7_17"  "7_18"  "7_19"  "7_2"   "7_20"  "7_21"  "7_22" 
[352] "7_23"  "7_24"  "7_25"  "7_26"  "7_27"  "7_28"  "7_29"  "7_3"   "7_30" 
[361] "7_31"  "7_32"  "7_33"  "7_34"  "7_35"  "7_36"  "7_37"  "7_38"  "7_39" 
[370] "7_4"   "7_40"  "7_41"  "7_42"  "7_43"  "7_44"  "7_45"  "7_46"  "7_47" 
[379] "7_48"  "7_5"   "7_6"   "7_7"   "7_8"   "7_9"   "8_1"   "8_10"  "8_11" 
[388] "8_12"  "8_13"  "8_14"  "8_15"  "8_16"  "8_17"  "8_18"  "8_19"  "8_2"  
[397] "8_20"  "8_21"  "8_22"  "8_23"  "8_24"  "8_25"  "8_26"  "8_27"  "8_28" 
[406] "8_29"  "8_3"   "8_30"  "8_31"  "8_32"  "8_33"  "8_34"  "8_35"  "8_36" 
[415] "8_37"  "8_38"  "8_39"  "8_4"   "8_40"  "8_41"  "8_42"  "8_43"  "8_44" 
[424] "8_45"  "8_46"  "8_47"  "8_48"  "8_5"   "8_6"   "8_7"   "8_8"   "8_9"  
[433] "9_1"   "9_10"  "9_11"  "9_12"  "9_13"  "9_14"  "9_15"  "9_16"  "9_17" 
[442] "9_18"  "9_19"  "9_2"   "9_20"  "9_21"  "9_22"  "9_23"  "9_24"  "9_25" 
[451] "9_26"  "9_27"  "9_28"  "9_29"  "9_3"   "9_30"  "9_31"  "9_32"  "9_33" 
[460] "9_34"  "9_35"  "9_36"  "9_37"  "9_38"  "9_39"  "9_4"   "9_40"  "9_41" 
[469] "9_42"  "9_43"  "9_44"  "9_45"  "9_46"  "9_47"  "9_48"  "9_5"   "9_6"  
[478] "9_7"   "9_8"   "9_9"  
> 
> fitted_plots_1 = list.files('fit_results/plot_ages1_35_top50_equal_interval_model_comparison/bh_partialb_top40/summary')
> m = regexec("[0-9]+\\_[0-9]+", fitted_plots_1)
> fitted_plots = unlist(regmatches(fitted_plots_1, m))
> unfitted = setdiff(names(fit_fp_top40_ages1_35_equal_interval)[plot_list[,7]], fitted_plots)
> fitted_order = which(names(fit_fp_top40_ages1_35_equal_interval) %in% fitted_plots)
> unfitted_order = which(names(fit_fp_top40_ages1_35_equal_interval) %in% unfitted)
> 
> for (i in unfitted_order) {
+   #i = 1
+   datalist = data_t[[i]][[3]]
+   growD = data_t[[i]][[2]]
+   unique(growD$f_p)
+   sp = colnames(growD)[10:ncol(growD)]
+   
+    {cl = makeCluster(numer_cores-2)      
+       registerDoParallel(cl)       
+       foreach(x=1:length(datalist), .packages = c('dplyr', 'cmdstanr')) %dopar% {fit_save(x)
+       }
+ 
+     # Save results 
+     summary_l = foreach(i=1:length(datalist)) %dopar% {
+     #i = 2
+     species = sp[i]
+     fit = readRDS(paste0('fit_results/plot_ages1_35_top50_equal_interval_model_comparison/bh_partialb_top40', '/posterior/',
+                      unique(growD$f_p),'_', species, '.RDS'))
+     summary = as.data.frame(fit$summary())}
+ 
+     save(summary_l, file=paste0('fit_results/plot_ages1_35_top50_equal_interval_model_comparison/bh_partialb_top40',
+                                   '/summary/','summary_',
+                                   unique(growD$f_p), '.rdata'))
+ 
+     # Extract results
+     r_trans_sp = vector()
+     a_trans_sp = matrix(NA,length(sp), length(sp))
+     r_trans_sp = foreach(i=1:length(datalist), .combine = c, .packages = c("dplyr")) %dopar% {(summary_l[[i]] %>% filter(variable == 'r'))$mean}
+     b_trans_sp = foreach(i=1:length(datalist), .combine = c, .packages = c("dplyr")) %dopar% {(summary_l[[i]] %>% filter(variable == 'b'))$mean}
+     a_trans_sp = foreach(i=1:length(datalist), .combine = rbind, .packages = c("dplyr")) %dopar% {(summary_l[[i]] %>% filter(grepl("a\\[", variable)))$mean}
+     a_trans_sp_inver = a_trans_sp # for calculating ND and FD
+     colnames(a_trans_sp_inver) = sp 
+     rownames(a_trans_sp_inver) = sp
+     colnames(a_trans_sp) = sp # saving the orginal results
+     rownames(a_trans_sp) = sp
+     names(r_trans_sp) = sp
+   save(a_trans_sp, file=paste0('fit_results/plot_ages1_35_top50_equal_interval_model_comparison/bh_partialb_top40', '/parameters/','a_',
+                                unique(growD$f_p), '.rdata'))
+   save(r_trans_sp, file=paste0('fit_results/plot_ages1_35_top50_equal_interval_model_comparison/bh_partialb_top40', '/parameters/','r_',
+                                unique(growD$f_p), '.rdata'))
+   save(b_trans_sp, file=paste0('fit_results/plot_ages1_35_top50_equal_interval_model_comparison/bh_partialb_top40', '/parameters/','b_',
+                                unique(growD$f_p), '.rdata'))                             
+   stopCluster(cl)
+ }
+ 
+ 
+   ### calculate ND FD
+   niche.diff_ij = matrix(nrow=length(sp), ncol=length(sp))
+   fitness.diff_ij = matrix(nrow=length(sp), ncol=length(sp))
+   fitness.diff_ji = matrix(nrow=length(sp), ncol=length(sp))
+   
+   for (i in 1:length(sp)) {
+     
+     # alphas
+     for (j in i+1:(length(sp))){
+       if(j > (length(sp))) break()
+       
+       aii = a_trans_sp_inver[sp[i], sp[i]]
+       aij = a_trans_sp_inver[sp[i], sp[j]] ###
+       aji = a_trans_sp_inver[sp[j], sp[i]] ###
+       ajj = a_trans_sp_inver[sp[j], sp[j]]
+       ri = r_trans_sp[i]
+       rj = r_trans_sp[j]
+       bi = b_trans_sp[i]
+       bj = b_trans_sp[j]
+       
+       niche.over = sqrt( (aij*aji)/(aii*ajj) )
+       niche.diff = 1 - niche.over
+       
+       fitness.diff.ij = ( ((exp(ri)-1)^(1/bi)) / ((exp(rj)-1)^(1/bj)) ) * sqrt( (ajj*aji) / (aii*aij) )
+       
+       fitness.diff.ji = ( ((exp(rj)-1)^(1/bj)) / ((exp(ri)-1)^(1/bi)) ) * sqrt( (aii*aij) / (ajj*aji) )
+       
+       niche.diff_ij[i, j] = niche.diff
+       fitness.diff_ij[i, j] = fitness.diff.ij
+       fitness.diff_ji[j, i] = fitness.diff.ji
+       
+     }
+   }
+   
+   colnames(niche.diff_ij) = sp
+   rownames(niche.diff_ij) = sp
+   colnames(fitness.diff_ij) = sp
+   rownames(fitness.diff_ij) = sp
+   colnames(fitness.diff_ji) = sp
+   rownames(fitness.diff_ji) = sp
+   niche.diff_ijtrans_sp = niche.diff_ij
+   fitness.diff_ijtrans_sp = fitness.diff_ij
+   fitness.diff_jitrans_sp = fitness.diff_ji
+   
+   
+   ##intra(r aii)
+   
+   r_trans_sp = as.data.frame(r_trans_sp)
+   r_trans_sp$r_trans_sp = as.numeric(r_trans_sp$r_trans_sp)
+   
+   alpha_intra = data.frame()
+   
+   for (i in 1:length(sp)){
+     if (i > length(sp)) break()
+     alpha_intra_1 = c(as.character(sp[i]), a_trans_sp[sp[i], sp[i]])
+     alpha_intra_1 = as.data.frame(alpha_intra_1)
+     alpha_intra_1 = t(alpha_intra_1)
+     alpha_intra = rbind(alpha_intra, alpha_intra_1)
+   }
+   
+   intra_1 = cbind(alpha_intra, r_trans_sp, b_trans_sp)
+   plot = rep(unique(growD$Plot), length(sp))
+   field = rep(unique(growD$Field), length(sp))
+   f_p = rep(unique(growD$f_p), length(sp))
+   
+   intra_trans = cbind(intra_1[, 1], 
+                       field = field,
+                       plot = plot,
+                       f_p = f_p,
+                       intra_1[,2: ncol(intra_1)])
+   
+   colnames(intra_trans)[c(1,5)] = c('sp', 'aii')
+   
+   save(intra_trans, file =paste0('fit_results/plot_ages1_35_top50_equal_interval_model_comparison/bh_partialb_top40', '/parameters/','intra_',
+                                  unique(growD$f_p), '.rdata'))
+   
+   ### nf pair arranged
+   
+   nf_pair_1 = data.frame()
+   
+   for (i in 1:length(sp)) {
+     for (j in i+1:length(sp)){
+       if(j > length(sp)) break()
+       
+       nf_pair_ij = c(as.character(sp[i]), as.character(sp[j]), niche.diff_ij[sp[i],sp[j]], fitness.diff_ij[sp[i],sp[j]])
+       nf_pair_ij = as.data.frame(nf_pair_ij)
+       nf_pair_ij = t(nf_pair_ij)
+       nf_pair_1 = rbind(nf_pair_1, nf_pair_ij)
+       
+     }
+   }
+   
+   nf_pair_2 = data.frame()
+   
+   for (i in 1:length(sp)) {
+     for (j in i+1:length(sp)){
+       if(j > length(sp)) break()
+       
+       nf_pair_ji = c(as.character(sp[j]), as.character(sp[i]), niche.diff_ij[sp[i],sp[j]], fitness.diff_ji[sp[j],sp[i]])
+       nf_pair_ji = as.data.frame(nf_pair_ji)
+       nf_pair_ji = t(nf_pair_ji)
+       nf_pair_2 = rbind(nf_pair_2, nf_pair_ji)
+       
+     }
+   }
+   
+   nf_pair = rbind(nf_pair_1, nf_pair_2)
+   sp_pair = paste(nf_pair[,1] , nf_pair[,2], sep = '.')
+   nf_pair_all = cbind(sp_pair, nf_pair)
+   nf_pair_all = cbind(nf_pair_all[,1], plot = rep(unique(growD$Plot), length(nf_pair_all$V1)),
+                       field = rep(unique(growD$Field), length(nf_pair_all$V1)),
+                       f_p = rep(unique(growD$f_p), length(nf_pair_all$V1)),
+                       nf_pair_all[,2:ncol(nf_pair_all)])
+   
+   colnames(nf_pair_all)[c(1, 5, 6, 7, 8)] = c("sp_pair","species_i", "species_j", "nd", "fd")
+   
+   ###inter aij aji
+   
+   alpha_pair_ij = data.frame()
+   
+   for (i in 1:length(sp)) {
+     for (j in i+1:length(sp)) {
+       if (j  > length(sp)) break()
+       alpha_pair_ij_1 = c(as.character(sp[i]),
+                           as.character(sp[j]),
+                           a_trans_sp[sp[i], sp[i]],
+                           a_trans_sp[sp[j], sp[j]],
+                           mean(c(a_trans_sp[sp[j], sp[j]],
+                                  a_trans_sp[sp[i], sp[i]])),
+                           a_trans_sp[sp[i], sp[j]])
+       alpha_pair_ij_1 = as.data.frame(alpha_pair_ij_1)
+       alpha_pair_ij_1 = t(alpha_pair_ij_1)
+       alpha_pair_ij = rbind(alpha_pair_ij, alpha_pair_ij_1)
+       
+     }
+   }
+   
+   alpha_pair_ji = data.frame()
+   
+   for (i in 1:length(sp)) {
+     for (j in i+1:length(sp)) {
+       if (j > length(sp)) break()
+       alpha_pair_ji_1 = c(as.character(sp[j]),
+                           as.character(sp[i]),
+                           a_trans_sp[sp[j], sp[j]],
+                           a_trans_sp[sp[i], sp[i]],
+                           mean(c(a_trans_sp[sp[j], sp[j]],
+                                  a_trans_sp[sp[i], sp[i]])),
+                           a_trans_sp[sp[j], sp[i]])
+       alpha_pair_ji_1 = as.data.frame(alpha_pair_ji_1)
+       alpha_pair_ji_1 = t(alpha_pair_ji_1)
+       alpha_pair_ji = rbind(alpha_pair_ji, alpha_pair_ji_1)
+       
+     }
+   }
+   
+   alpha_pair = rbind(alpha_pair_ij, alpha_pair_ji)
+   sp_pair_alpha = paste(alpha_pair[,1], alpha_pair[,2], sep = '_')
+   alpha_pair_all = cbind(sp_pair_alpha, alpha_pair)
+   colnames(alpha_pair_all) = c('sp_pair', 'sp_i', 'sp_j', 'aii', 'ajj', 'a_mean', 'aij')
+   
+   ### aggragate inter 
+   
+   library('dplyr')
+   nf_pair_all = arrange(nf_pair_all, nf_pair_all$sp_pair)
+   alpha_pair_all = arrange(alpha_pair_all, alpha_pair_all$sp_pair)
+   
+   inter_all_trans = cbind(nf_pair_all,
+                           alpha_pair_all[, c(4:7)])  
+   #colnames(inter_all_trans)
+   save(inter_all_trans, file=paste0('fit_results/plot_ages1_35_top50_equal_interval_model_comparison/bh_partialb_top40', '/parameters/','inter_',
+                                     unique(growD$f_p), '.rdata'))
+   
+ }
> 
> proc.time()
      user     system    elapsed 
    89.698     15.918 386331.381 
