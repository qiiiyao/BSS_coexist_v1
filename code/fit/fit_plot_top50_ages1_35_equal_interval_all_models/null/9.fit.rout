
R version 4.2.2 (2022-10-31) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> 
> # set up R environment
> library(cmdstanr)
This is cmdstanr version 0.6.1
- CmdStanR documentation and vignettes: mc-stan.org/cmdstanr
- CmdStan path: /data/home/shpli3/.cmdstan/cmdstan-2.32.0
- CmdStan version: 2.32.0
> options(mc.cores = parallel::detectCores(logical = F)) 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(parallel)
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
> setwd("/data/home/shpli3/R_projects/BSS_exclude_tree_raw")
> 
> # Load data
> load("/data/home/shpli3/my_pc/BSS/code/data preparation/transformed data/fit_fp_top50_ages1_35_equal_interval.RData")
> 
> # run model chains separately then combine then to avoid memory issues
> stan.seed = 52
> file = file.path('/data/home/shpli3/my_pc/BSS/code/fit/stancode/model_comprison/constrained_competition_equal_interval/Exp_r_allposi.stan')
> mod = cmdstan_model(file
+ #, stanc_options = list("allow-undefined")
+ )
> numer_cores = parallel::detectCores(logical = F)
> chains = 4 # 4 chains in parallel
> sampling = 2500
> warmup = 1000
> thin = 10
> 
> 
> fit_save = function(x) {
+   #x = 2
+   species = sp[x]
+   fit = mod$sample(data = datalist[[x]],
+                    seed = stan.seed, 
+                    chains = chains, 
+                    parallel_chains = chains,
+                    iter_warmup = warmup,
+                    iter_sampling = sampling,
+                    refresh = 100, # print update every 100 iters
+                    thin = thin,
+                    max_treedepth = 20,
+                    adapt_delta = 0.99)
+   
+   # Raw output
+   #------------ 
+   fit$save_object(file = paste0('fit_results/plot_ages1_35_top50_equal_interval_model_comparison/null', '/posterior/',
+                                 unique(growD$f_p),'_', species, '.RDS'))
+ }
> 
> #--------------------------------------------------
> # Estimate interactions with a joint NDD*RI model for t1
> #--------------------------------------------------
> data_t = fit_fp_top50_ages1_35_equal_interval
> plot_list = sapply(seq(1, 480, 48), function(x){y = c(x:(x+47))})
> names(fit_fp_top50_ages1_35_equal_interval)[plot_list[,9]]
 [1] "8_1"  "8_10" "8_11" "8_12" "8_13" "8_14" "8_15" "8_16" "8_17" "8_18"
[11] "8_19" "8_2"  "8_20" "8_21" "8_22" "8_23" "8_24" "8_25" "8_26" "8_27"
[21] "8_28" "8_29" "8_3"  "8_30" "8_31" "8_32" "8_33" "8_34" "8_35" "8_36"
[31] "8_37" "8_38" "8_39" "8_4"  "8_40" "8_41" "8_42" "8_43" "8_44" "8_45"
[41] "8_46" "8_47" "8_48" "8_5"  "8_6"  "8_7"  "8_8"  "8_9" 
> 
> fitted_plots_1 = list.files('fit_results/plot_ages1_35_top50_equal_interval_model_comparison/null/summary')
> m = regexec("[0-9]+\\_[0-9]+", fitted_plots_1)
> fitted_plots = unlist(regmatches(fitted_plots_1, m))
> unfitted = setdiff(names(data_t)[plot_list[,9]], fitted_plots)
> unfitted_order = which(names(data_t) %in% unfitted)
> 
> for (i in unfitted_order) {
+   #i = 1
+   datalist = data_t[[i]][[3]]
+   growD = data_t[[i]][[2]]
+   unique(growD$f_p)
+   sp = colnames(growD)[10:ncol(growD)]
+   
+   {cl = makeCluster(numer_cores-2)      
+     registerDoParallel(cl)       
+     foreach(x=1:length(datalist), .packages = c('dplyr', 'cmdstanr')) %dopar% {fit_save(x)
+       }
+ 
+       # Save results 
+       summary_l = foreach(i=1:length(datalist)) %dopar% {
+         #i = 2
+       species = sp[i]
+       fit = readRDS(paste0('fit_results/plot_ages1_35_top50_equal_interval_model_comparison/null', '/posterior/',
+                      unique(growD$f_p),'_', species, '.RDS'))
+       summary = as.data.frame(fit$summary())}
+ 
+       save(summary_l, file=paste0('fit_results/plot_ages1_35_top50_equal_interval_model_comparison/null',
+                                   '/summary/','summary_',
+                                   unique(growD$f_p), '.rdata'))
+ 
+   # Extract results
+    r_trans_sp = vector()
+    r_trans_sp = foreach(i=1:length(datalist), .combine = c, .packages = c("dplyr")) %dopar% {(summary_l[[i]] %>% filter(variable == 'r'))$mean}
+    names(r_trans_sp) = sp
+ 
+    save(r_trans_sp, file=paste0('fit_results/plot_ages1_35_top50_equal_interval_model_comparison/null', '/parameters/','r_',
+                                unique(growD$f_p), '.rdata'))
+    stopCluster(cl)
+    }
+ }
> 
> proc.time()
   user  system elapsed 
  2.511   0.447  31.472 
