dat_suc_sp_comparison = dat_suc_sp_bh_partialb %>%
left_join(dat_suc_sp_bh_allb[,c('f_p_sp', "mnd.a" ,"mlgfd.a")],
by = 'f_p_sp') %>%
filter(!is.na(mnd.a.y))
plot(dat_suc_sp_comparison$mnd.a.x,
dat_suc_sp_comparison$mnd.a.y)
### the corrletion between estimated ND values from model_bh_partialb and from model_bh_allb
nd_model_cor = lmer(mnd.a.y ~ mnd.a.x + (1|f_p),
data = dat_suc_sp_comparison,
REML = T)
r.squaredGLMM(nd_model_cor)
nd_model_cor = lm(mnd.a.y ~ mnd.a.x,
data = dat_suc_sp_comparison)
summary(nd_model_cor)
#### Get the model predictive value
v = seq(min(dat_suc_sp_comparison$mnd.a.x),
max(dat_suc_sp_comparison$mnd.a.x),
length.out = 100)
nd_model_cor_pre = ggpredict(nd_model_cor,
type = 'fixed', terms = 'mnd.a.x[v]')
range_nd_x = range(dat_suc_sp_comparison$mnd.a.x)
range_nd_y = range(dat_suc_sp_comparison$mnd.a.y)
fig_nd_model_cor = ggplot()+
geom_point(data = dat_suc_sp_comparison,
mapping = aes(x = mnd.a.x, y = mnd.a.y),
color = "grey50",
alpha = 0.5)+
geom_ribbon(data = nd_model_cor_pre,
aes(x = x, ymin = conf.low, ymax = conf.high),
fill = 'darkgrey', alpha = 0.5) + # CI ribbon
geom_line(data = nd_model_cor_pre,
mapping = aes(x = x, y = predicted),
linewidth = 2,
color = 'black')+
labs(x = 'Partial_EBH', y = 'EBH')+
annotate("text", x=range_nd_x[1]+(range_nd_x[2]-range_nd_x[1])*0.225,
y=range_nd_y[1]+(range_nd_y[2]-range_nd_y[1])*0.99,
label = expression("Niche difference"["ND"[ab]])
, size = 5
)+
annotate("text", x=range_nd_x[1]+(range_nd_x[2]-range_nd_x[1])*0.1,
y=range_nd_y[1]+(range_nd_y[2]-range_nd_y[1])*0.92,
label = expression(R^2 ~ "= 0.39")
, size = 5
)+
scale_x_continuous(limits = c(range_nd_x[1], 0.82)) +
theme_regular()
### the corrletion between estimated lgfd values from model_bh_partialb and from model_bh_allb
lgfd_model_cor = lmer(mlgfd.a.y ~ mlgfd.a.x + (1|f_p),
data = dat_suc_sp_comparison,
REML = T)
cor.test(dat_suc_sp_comparison$mlgfd.a.x,
dat_suc_sp_comparison$mlgfd.a.y)
summary(lgfd_model_cor)
lgfd_model_cor = lm(mlgfd.a.y ~ mlgfd.a.x,
data = dat_suc_sp_comparison)
summary(lgfd_model_cor)
#### Get the model predictive value
v = seq(min(dat_suc_sp_comparison$mlgfd.a.x),
max(dat_suc_sp_comparison$mlgfd.a.x),
length.out = 100)
lgfd_model_cor_pre = ggpredict(lgfd_model_cor,
type = 'fixed', terms = 'mlgfd.a.x[v]')
range_lgfd_x = range(dat_suc_sp_comparison$mlgfd.a.x)
range_lgfd_y = range(dat_suc_sp_comparison$mlgfd.a.y)
fig_lgfd_model_cor = ggplot()+
geom_point(data = dat_suc_sp_comparison,
mapping = aes(x = mlgfd.a.x, y = mlgfd.a.y),
color = "grey50",
alpha = 0.5)+
geom_ribbon(data = lgfd_model_cor_pre,
aes(x = x, ymin = conf.low, ymax = conf.high),
fill = 'darkgrey', alpha = 0.5) + # CI ribbon
geom_line(data = lgfd_model_cor_pre,
mapping = aes(x = x, y = predicted),
linewidth = 2,
color = 'black')+
annotate("text", x=range_lgfd_x[1]+(range_lgfd_x[2]-range_lgfd_x[1])*0.345,
y=range_lgfd_y[1]+(range_lgfd_y[2]-range_lgfd_y[1])*0.99,
label = expression("Relative fitness difference"["RFD"[ab]])
, size = 5
)+
annotate("text", x=range_lgfd_x[1]+(range_lgfd_x[2]-range_lgfd_x[1])*0.1,
y=range_lgfd_y[1]+(range_lgfd_y[2]-range_lgfd_y[1])*0.92,
label = expression(R^2 ~ "= 0.72")
, size = 5
)+
labs(x = 'Partial_EBH', y = ' ')+
scale_y_continuous(labels = scales::number_format(accuracy = 0.1) ) +
theme_regular()
#Fig.S1
# Merge and export eight plots
sem_nfd_model_cor = ggarrange(fig_nd_model_cor, fig_lgfd_model_cor,
nrow = 1, ncol = 2,
labels = c('a',
'b'),
font.label = list(size = 18)
#,vjust = 1.8
)
sem_nfd_model_cor
emf('results/figures_ages1_35_top50_equal_interval_bh_partialb/Fig.S1_mod_cor.emf',
width = 30*0.8, height = 15*0.8, coordDPI = 1200,
emfPlusFontToPath=TRUE, # setting emfPlusFontToPath=TRUE to
# ensure text looks correct on the viewing system
units = 'cm')
sem_nfd_model_cor
dev.off() #turn off device and finalize file
#### SEM: Success ~ mND + mRFD ~ mfd + mpd for all species ####
### Original model ###
rm(list = ls())
require(glmmTMB)
library(piecewiseSEM)
require(optimx)
require(dplyr)
source('code/function/plot_func.R')
### SEM for establishment
setwd("D:/R projects/BSS")
load('code/results_analyzing/analysing_ages1_35_top50_equal_interval_bh_partialb_data/dat_suc_sp.rdata')
numcols = grep("^m.",names(dat_suc_sp))
dat_suc_sps = dat_suc_sp
dat_suc_sps[,numcols] = scale(dat_suc_sps[,numcols])
dat_suc_sps$species_1 = as.factor(dat_suc_sps$species)
nrow(dat_suc_sps)
estab_sem1_md.a_all = psem(
glmmTMB(estab~mnd.a+mlgfd.a
+mpd.a_all
+mconti_func_d.a_all
#+(1|species)
+(1|field)
#+(1|f_p)
, family=binomial, data=dat_suc_sps,
control=glmmTMBControl(optimizer=optim,
optArgs=list(method="BFGS"))),
glmmTMB(mnd.a~mpd.a_all+
mconti_func_d.a_all+
#(1|species)+
#(1|field)+
(1|f_p)
, family=gaussian, data = dat_suc_sps),
glmmTMB(mlgfd.a~#mpd.a_all+
mconti_func_d.a_all+
(1|species)+
#(1|field)#+
(1|f_p)
, family=gaussian, data=dat_suc_sps),
mlgfd.a %~~% mnd.a,
#estab %~~% mpd,
#estab %~~% mconti_func_d,
data=dat_suc_sps)
summary(estab_sem1_md.a_all)
### SEM for Dominance ###
dat_dom_sps = dat_suc_sps %>% filter(stage %in% c("establish", "dominant"))
nrow(dat_dom_sps)
domin_sem1_md.a_all = psem(
glmmTMB(domin~mnd.a+
mlgfd.a+
mpd.a_all+
mconti_func_d.a_all+
#(1|species)
(1|field)
+(1|f_p)
, family=binomial, data=dat_dom_sps,
control=glmmTMBControl(optimizer=optim,
optArgs=list(method="BFGS"))),
glmmTMB(mnd.a~mpd.a_all+
mconti_func_d.a_all+
#(1|species)+
#(1|field)
+(1|f_p)
, family=gaussian, data = dat_dom_sps),
glmmTMB(mlgfd.a~#mpd.a_all+
mconti_func_d.a_all+
#(1|species)+
# (1|field)
+(1|f_p)
, family=gaussian, data=dat_dom_sps),
mlgfd.a %~~% mnd.a,
#domin %~~% mpd,
#domin %~~% mconti_func_d,
data=dat_dom_sps)
summary(domin_sem1_md.a_all)
##### Draw plot for md.a #####
require(ggh4x)
### The followed code is adapted from Xu_et_al_2022_GCB
### Establishment corrected std coefficients in the glmer, following nakagawa 2013 MEE
sd.y_estab_sem1_md.a_all = sqrt(predict(estab_sem1_md.a_all[[1]],
re.form=NA)%>%var+sum(unlist(VarCorr(estab_sem1_md.a_all[[1]])))+pi^2/3)
sd.y_estab_sem1_md.a_all
std.estab_sem1_md.a_all=unlist(fixef(estab_sem1_md.a_all[[1]]))[-1]*
c(sd(dat_suc_sps$mpd.a_all),
sd(dat_suc_sps$mconti_func_d.a_all),
sd(dat_suc_sps$mnd),
sd(dat_suc_sps$mlgfd))/sd.y_estab_sem1_md.a_all
std.estab_sem1_md.a_all
# merge the new corrected cofficients into the original cofficients data frame
coefs_estab_sem1_md.a_all=coefs(estab_sem1_md.a_all)# original coefficients of piecewiseSEM
coefs_estab_sem1_md.a_all[1:4,8]=std.estab_sem1_md.a_all
### Dominance corrected std coefficients in the glmer, following nakagawa 2013 MEE
sd.y_domin_sem1_md.a_all=sqrt(predict(domin_sem1_md.a_all[[1]],re.form=NA)%>%var+sum(unlist(VarCorr(domin_sem1_md.a_all[[1]])))+pi^2/3)
sd.y_domin_sem1_md.a_all
std.domin_sem1_md.a_all=unlist(fixef(domin_sem1_md.a_all[[1]]))[-1]*
c(sd(dat_dom_sps$mpd.a_all),
sd(dat_dom_sps$mconti_func_d.a_all),
sd(dat_dom_sps$mnd),
sd(dat_dom_sps$mlgfd))/sd.y_domin_sem1_md.a_all
std.domin_sem1_md.a_all
# merge the new corrected cofficients into the original cofficients data frame
coefs_domin_sem1_md.a_all=coefs(domin_sem1_md.a_all)# original coefficients of piecewiseSEM
coefs_domin_sem1_md.a_all[1:4,8]=std.domin_sem1_md.a_all
coefs_domin_sem1_md.a_all
### Calculate direct and indirect effects of SEM following Xu Meng (2022) GCB
### Estab
coefs_estab_sem1_md.a_all = coefs_estab_sem1_md.a_all[-nrow(coefs_estab_sem1_md.a_all),]
sem_estab_effects_md.a_all = data.frame(predictor = rep(c('mnd.a', 'mlgfd.a',
'mpd.a_all', 'mconti_func_d.a_all'), 3),
type = rep(c('direct', 'indirect', 'total'),
each = 4),
value = 0,
significant = 'yes')
coefs_estab_sem1_md.a_all_c = coefs_estab_sem1_md.a_all[coefs_estab_sem1_md.a_all$P.Value < 0.05,]
for (i in 1:length(unique(coefs_estab_sem1_md.a_all_c$Predictor))) {
#i = 4
predictor_1 = unique(coefs_estab_sem1_md.a_all_c$Predictor)[i]
dat = coefs_estab_sem1_md.a_all_c[coefs_estab_sem1_md.a_all_c$Predictor == predictor_1,]
dat_2 = coefs_estab_sem1_md.a_all_c[coefs_estab_sem1_md.a_all_c$Predictor %in% dat$Response,]
dat_3 = rbind(dat, dat_2)
if (nrow(dat_3) == 1) {
sem_estab_effects_md.a_all[sem_estab_effects_md.a_all$predictor == predictor_1&
sem_estab_effects_md.a_all$type == 'direct',]$value = dat_3$Std.Estimate
sem_estab_effects_md.a_all[sem_estab_effects_md.a_all$predictor == predictor_1&
sem_estab_effects_md.a_all$type == 'total',]$value = dat_3$Std.Estimate
} else if(nrow(dat_3) != 1) {
if (nrow(dat_3[dat_3$Response == 'estab' &
dat_3$Predictor == predictor_1,]) > 0) {
sem_estab_effects_md.a_all[sem_estab_effects_md.a_all$predictor == predictor_1&
sem_estab_effects_md.a_all$type == 'direct',]$value = dat_3[dat_3$Response == 'estab' &
dat_3$Predictor == predictor_1,]$Std.Estimate
}
sem_estab_effects_md.a_all[sem_estab_effects_md.a_all$predictor == predictor_1&
sem_estab_effects_md.a_all$type == 'indirect',]$value = sum(dat_3[dat_3$Response != 'estab',]$Std.Estimate*dat_3[dat_3$Response == 'estab' &
dat_3$Predictor != predictor_1,]$Std.Estimate)
sem_estab_effects_md.a_all[sem_estab_effects_md.a_all$predictor == predictor_1&
sem_estab_effects_md.a_all$type == 'total',]$value  = sem_estab_effects_md.a_all[sem_estab_effects_md.a_all$predictor == predictor_1&
sem_estab_effects_md.a_all$type == 'direct',]$value + sem_estab_effects_md.a_all[sem_estab_effects_md.a_all$predictor == predictor_1&
sem_estab_effects_md.a_all$type == 'indirect',]$value
}
}
### Domin
coefs_domin_sem1_md.a_all = coefs_domin_sem1_md.a_all[-nrow(coefs_domin_sem1_md.a_all),]
sem_domin_effects_md.a_all = data.frame(predictor = rep(c('mnd.a', 'mlgfd.a',
'mpd.a_all', 'mconti_func_d.a_all'), 3),
type = rep(c('direct', 'indirect', 'total'),
each = 4),
value = 0,
significant = 'yes')
coefs_domin_sem1_md.a_all_c = coefs_domin_sem1_md.a_all[coefs_domin_sem1_md.a_all$P.Value < 0.05,]
for (i in 1:length(unique(coefs_domin_sem1_md.a_all_c$Predictor))) {
#i = 4
predictor_1 = unique(coefs_domin_sem1_md.a_all_c$Predictor)[i]
dat = coefs_domin_sem1_md.a_all_c[coefs_domin_sem1_md.a_all_c$Predictor == predictor_1,]
dat_2 = coefs_domin_sem1_md.a_all_c[coefs_domin_sem1_md.a_all_c$Predictor %in% dat$Response,]
dat_3 = rbind(dat, dat_2)
if (nrow(dat_3) == 1) {
sem_domin_effects_md.a_all[sem_domin_effects_md.a_all$predictor == predictor_1&
sem_domin_effects_md.a_all$type == 'direct',]$value = dat_3$Std.Estimate
sem_domin_effects_md.a_all[sem_domin_effects_md.a_all$predictor == predictor_1&
sem_domin_effects_md.a_all$type == 'total',]$value = dat_3$Std.Estimate
} else if(nrow(dat_3) != 1) {
sem_domin_effects_md.a_all[sem_domin_effects_md.a_all$predictor == predictor_1&
sem_domin_effects_md.a_all$type == 'direct',]$value = dat_3[dat_3$Response == 'domin' &
dat_3$Predictor == predictor_1,]$Std.Estimate
sem_domin_effects_md.a_all[sem_domin_effects_md.a_all$predictor == predictor_1&
sem_domin_effects_md.a_all$type == 'indirect',]$value = sum(dat_3[dat_3$Response != 'domin',]$Std.Estimate*dat_3[dat_3$Response == 'domin' &
dat_3$Predictor != predictor_1,]$Std.Estimate)
sem_domin_effects_md.a_all[sem_domin_effects_md.a_all$predictor == predictor_1&
sem_domin_effects_md.a_all$type == 'total',]$value  = sem_domin_effects_md.a_all[sem_domin_effects_md.a_all$predictor == predictor_1&
sem_domin_effects_md.a_all$type == 'direct',]$value + sem_domin_effects_md.a_all[sem_domin_effects_md.a_all$predictor == predictor_1&
sem_domin_effects_md.a_all$type == 'indirect',]$value
}
}
#-----------Draw plots for SEMs' relative total effects, direct and indirect effects
### Estab
require(ggthemes)
require(ggplot2)
require(devEMF)
sem_estab_effects_md.a_all_total = sem_estab_effects_md.a_all %>% filter(type == 'total')
sem_estab_effects_md.a_all.percent = sem_estab_effects_md.a_all_total%>%
mutate(percent=abs(value)/sum(abs(value)),value=NULL)
sem_estab_effects_md.a_all.longer = sem_estab_effects_md.a_all %>% filter(type != 'total'
#& value != 0
)
# Relative total effect
sem_estab_effects_md.a_all.percent.plot =
ggplot(data=sem_estab_effects_md.a_all.percent,aes(percent,predictor,fill=predictor))+
geom_col(width=0.8)+
geom_text(aes(label=paste(sprintf("%.1f",percent*100),"%",sep="")),hjust=-0.1,size=3)+
facet_wrap(~"Relative total effect")+
scale_y_discrete(limits=c("mconti_func_d.a_all", "mpd.a_all", "mlgfd.a", "mnd.a"),
labels=#c(bquote('I-N MFD'[ab]),bquote('I-N MPD'[ab]),bquote('I-N MRFD'[ab]),bquote('I-N MND'[ab]))
c(expression(MFD[ab]),
expression(MPD[ab]),
expression(RFD[ab]),
expression(ND[ab])) ,
position="right")+
scale_fill_manual(values = c("#ccb974ff", "#dd8452ff", "#4c72b0ff", "#55a868ff"))+# color palatte in ggthemes
xlim(0,0.5)+
xlab("")+
ylab("")+
#theme_test()+
theme_for_sem()+
guides(fill="none")
sem_estab_effects_md.a_all.percent.plot
# Direct and indirect effects
sem_estab_effects_md.a_all.dir_indir.mpd_all.plot =
ggplot(data=sem_estab_effects_md.a_all.longer,aes(x=value,y=predictor,fill=predictor))+
geom_col(width=0.8)+
geom_vline(xintercept = 0, linetype = 2)+
facet_wrap(~type,labeller=as_labeller(c("direct"="Direct effects","indirect"="Indirect effects")),
scales = 'free')+
ggh4x::facetted_pos_scales(
x = list(
`direct` = scale_x_continuous(limits = c(-0.44, 0.44), breaks = seq(-0.4, 0.4, 0.2)),
`indirect` = scale_x_continuous(limits = c(-0.14, 0.14), breaks = seq(-0.1, 0.1, 0.1))
)
)+
scale_y_discrete(limits=c("mconti_func_d.a_all", "mpd.a_all", "mlgfd.a", "mnd.a"),
position="right")+
scale_fill_manual(values = c("#ccb974ff", "#dd8452ff", "#4c72b0ff", "#55a868ff"))+# color palatte in ggthemes
guides(fill="none")+
xlab("")+
ylab("")+
#theme_test()+
theme_for_sem()+
theme(axis.title=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),
strip.text=element_text(face="bold"))
sem_estab_effects_md.a_all.dir_indir.mpd_all.plot
### Space for SEM
sem_estab_md.a_all_space1 = ggplot(NULL)+theme_void()
sem_estab_md.a_all_space2 = ggplot(NULL)+theme_void()
### domin
sem_domin_effects_md.a_all_total = sem_domin_effects_md.a_all %>% filter(type == 'total')
sem_domin_effects_md.a_all.percent = sem_domin_effects_md.a_all_total%>%
mutate(percent=abs(value)/sum(abs(value)),value=NULL)
sem_domin_effects_md.a_all.longer = sem_domin_effects_md.a_all %>% filter(type != 'total'
#&value != 0
)
# Relative total effect
sem_domin_effects_md.a_all.percent.plot =
ggplot(data=sem_domin_effects_md.a_all.percent,aes(percent,predictor,fill=predictor))+
geom_col(width=0.8)+
geom_text(aes(label=paste(sprintf("%.1f",percent*100),"%",sep="")),hjust=-0.1,size=3)+
facet_wrap(~"Relative total effect")+
scale_y_discrete(limits=c("mconti_func_d.a_all", "mpd.a_all", "mlgfd.a", "mnd.a"),
labels=#c(bquote('E-N MFD'[ab]),bquote('E-N MPD'[ab]),bquote('E-N MRFD'[ab]),bquote('E-N MND'[ab]))
c(expression(MFD[ab]),
expression(MPD[ab]),
expression(RFD[ab]),
expression(ND[ab])),
position="right")+
scale_fill_manual(values = c("#ccb974ff", "#dd8452ff", "#4c72b0ff", "#55a868ff"))+# color palatte in ggthemes
xlim(0,0.72)+
xlab("")+
ylab("")+
#theme_test()+
theme_for_sem() +
guides(fill="none")
# Direct and indirect effects
sem_domin_effects_md.a_all.dir_indir.mpd_all.plot =
ggplot(data=sem_domin_effects_md.a_all.longer,aes(x=value,y=predictor,fill=predictor))+
geom_col(width=0.8)+
geom_vline(xintercept = 0, linetype = 2)+
facet_wrap(~type,labeller=as_labeller(c("direct"="Direct effects",
"indirect"="Indirect effects")),
scales = 'free')+
ggh4x::facetted_pos_scales(
x = list(
`direct` = scale_x_continuous(limits = c(-0.44, 0.44), breaks = seq(-0.4, 0.4, 0.2)),
`indirect` = scale_x_continuous(limits = c(-0.24, 0.24), breaks = seq(-0.2, 0.2, 0.1))
)
)+
scale_y_discrete(limits=c("mconti_func_d.a_all", "mpd.a_all", "mlgfd.a", "mnd.a"),
position="right")+
scale_x_continuous(breaks = seq(-0.4, 0.4, 0.2),
limits = c(-0.4, 0.4))+
scale_fill_manual(values = c("#ccb974ff", "#dd8452ff", "#4c72b0ff", "#55a868ff"))+# color palatte in ggthemes
guides(fill="none")+
#theme_test()+
xlab("")+
ylab("")+
#theme_test()+
theme_for_sem() +
theme(axis.title=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank(),
strip.text=element_text(face="bold"))
### Space for SEM
sem_domin_md.a_all_space1 = ggplot(NULL)+theme_void()
sem_domin_md.a_all_space2 = ggplot(NULL)+theme_void()
# Merge and export eight plots
sem_md.a_all_plot_all = ggarrange(sem_estab_md.a_all_space1, sem_estab_md.a_all_space2,
sem_estab_effects_md.a_all.dir_indir.mpd_all.plot,
sem_estab_effects_md.a_all.percent.plot,
sem_domin_md.a_all_space1,sem_domin_md.a_all_space2,
sem_domin_effects_md.a_all.dir_indir.mpd_all.plot,
sem_domin_effects_md.a_all.percent.plot,
nrow = 4, ncol = 2,
heights = c(0.35, 0.15, 0.35, 0.15),
labels = c('a', '', '','',
'b', '', '',''),
vjust = 1.8)
require(ggpubr)
# Merge and export eight plots
sem_md.a_all_plot_all = ggarrange(sem_estab_md.a_all_space1, sem_estab_md.a_all_space2,
sem_estab_effects_md.a_all.dir_indir.mpd_all.plot,
sem_estab_effects_md.a_all.percent.plot,
sem_domin_md.a_all_space1,sem_domin_md.a_all_space2,
sem_domin_effects_md.a_all.dir_indir.mpd_all.plot,
sem_domin_effects_md.a_all.percent.plot,
nrow = 4, ncol = 2,
heights = c(0.35, 0.15, 0.35, 0.15),
labels = c('a', '', '','',
'b', '', '',''),
vjust = 1.8)
sem_md.a_all_plot_all
# Merge and export eight plots
sem_md.a_all_plot_all = ggarrange(sem_estab_md.a_all_space1, sem_estab_md.a_all_space2,
sem_estab_effects_md.a_all.dir_indir.mpd_all.plot,
sem_estab_effects_md.a_all.percent.plot,
sem_domin_md.a_all_space1,sem_domin_md.a_all_space2,
sem_domin_effects_md.a_all.dir_indir.mpd_all.plot,
sem_domin_effects_md.a_all.percent.plot,
nrow = 4, ncol = 2,
heights = c(0.30, 0.20, 0.30, 0.20),
labels = c('a', '', '','',
'b', '', '',''),
vjust = 1.8)
sem_md.a_all_plot_all
sem_domin_effects_md.a_all.percent.plot
theme_for_sem
# Relative total effect
sem_domin_effects_md.a_all.percent.plot =
ggplot(data=sem_domin_effects_md.a_all.percent,aes(percent,predictor,fill=predictor))+
geom_col(width=0.8)+
geom_text(aes(label=paste(sprintf("%.1f",percent*100),"%",sep="")),hjust=-0.1,size=3)+
facet_wrap(~"Relative total effect")+
scale_y_discrete(limits=c("mconti_func_d.a_all", "mpd.a_all", "mlgfd.a", "mnd.a"),
labels=#c(bquote('E-N MFD'[ab]),bquote('E-N MPD'[ab]),bquote('E-N MRFD'[ab]),bquote('E-N MND'[ab]))
c(expression(MFD[ab]),
expression(MPD[ab]),
expression(RFD[ab]),
expression(ND[ab])),
position="right")+
scale_fill_manual(values = c("#ccb974ff", "#dd8452ff", "#4c72b0ff", "#55a868ff"))+# color palatte in ggthemes
xlim(0,0.72)+
xlab("")+
ylab("")+
#theme_test()+
theme_for_sem() +
guides(fill="none")
# Merge and export eight plots
sem_md.a_all_plot_all = ggarrange(sem_estab_md.a_all_space1, sem_estab_md.a_all_space2,
sem_estab_effects_md.a_all.dir_indir.mpd_all.plot,
sem_estab_effects_md.a_all.percent.plot,
sem_domin_md.a_all_space1,sem_domin_md.a_all_space2,
sem_domin_effects_md.a_all.dir_indir.mpd_all.plot,
sem_domin_effects_md.a_all.percent.plot,
nrow = 4, ncol = 2,
heights = c(0.30, 0.20, 0.30, 0.20),
labels = c('a', '', '','',
'b', '', '',''),
vjust = 1.8)
sem_md.a_all_plot_all
# Merge and export eight plots
sem_md.a_all_plot_all = ggarrange(sem_estab_md.a_all_space1, sem_estab_md.a_all_space2,
sem_estab_effects_md.a_all.dir_indir.mpd_all.plot,
sem_estab_effects_md.a_all.percent.plot,
sem_domin_md.a_all_space1,sem_domin_md.a_all_space2,
sem_domin_effects_md.a_all.dir_indir.mpd_all.plot,
sem_domin_effects_md.a_all.percent.plot,
nrow = 4, ncol = 2,
heights = c(0.30, 0.20, 0.30, 0.20),
labels = c('a', '', '','',
'b', '', '',''),
vjust = 1.8)
emf('results/figures_ages1_35_top50_equal_interval_bh_partialb/sem_md.a_all_plot_all.emf',
width=16*0.8, height=24*0.8, coordDPI = 1200,
emfPlusFontToPath=TRUE, # setting emfPlusFontToPath=TRUE to
# ensure text looks correct on the viewing system
units = 'cm')
sem_md.a_all_plot_all
dev.off() #turn off device and finalize file
14.66/6.88
22.28/2.13
10.46*(3/10)
10.46-3.41
7.05/2
27.87/2.13
13.08-3.41
9.67/2
1.67*2
13.08-3.34
13.08-3.34-2
7.74/2
13.08-3.6
13.08-3.6-(2.37*2)
4.74/2
13.08-3.4-(2.37*2)
4.94/2
4.84*2
4.84*2+3.41
13.08-3.4
13.08-3.4-(2.37*2)
12.03-3.41
8.62/2
